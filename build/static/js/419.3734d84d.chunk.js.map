{"version":3,"file":"static/js/419.3734d84d.chunk.js","mappings":"sRAmDA,UA3C+B,WAC7B,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,EAAAC,SAAQ,CAACC,UAAU,SAAC,IAAO,IAAI,UAC9B,SAAC,KAAK,CAACC,QAASN,EAAQ,SACrB,SAACA,GACA,MAAwDA,EAAQO,KAAxDC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OAAQC,EAAe,EAAfA,gBAC5BC,EAASZ,EAATY,KAGOC,EAGXH,EAHFI,YACMC,EAEJL,EAFFM,KACgBC,EACdP,EADFQ,eAIoBC,EAElBV,EAFFW,mBACmBC,EACjBZ,EADFa,kBAKF,OAFApB,EAASqB,EAAAA,EAAAA,OAA4BX,KAGnC,SAAC,IAAI,CACHJ,MAAOA,EACPgB,MAAO,CAAEL,iBAAAA,EAAkBE,eAAAA,GAC3BV,gBAAiBA,EACjBD,OAAQ,CACNG,mBAAAA,EACAE,YAAAA,EACAE,mBAAAA,GAEFQ,UAAU,GAGhB,KAIR,EAKA,IAAMC,EAAkB,yCAAG,WAAOC,GAAM,sFAGN,OAFxBC,EAAuBD,EAAvBC,mBAAkB,EAEU,CAClCC,OAAOD,EAAmBE,MAAM,KAAKC,GAAG,GAAGD,MAAM,KAAKC,GAAG,IACzDF,OAAOD,EAAmBE,MAAM,KAAKC,GAAG,GAAGD,MAAM,KAAKC,GAAG,IACzDH,EAAmBE,MAAM,KAAKC,GAAG,GAAGD,MAAM,KAAKC,GAAG,IAH7CC,EAAQ,KAAEC,EAAS,KAAErB,EAAI,eAMbsB,EAAAA,EAAAA,GAAU,mDAAD,OACyBF,EAAQ,sBAAcC,EAAS,+UAClF,KAAD,EAFS,OAAJ1B,EAAI,yBAIH,CAAEA,KAAAA,EAAMK,KAAAA,IAAM,2CACtB,gBAduB,sCAiBXuB,EAAS,SAAH,OAAMR,EAAM,EAANA,OAAM,OAC7BS,EAAAA,EAAAA,IAAM,CAAEpC,QAAS0B,EAAmBC,IAAW,C","sources":["pages/SearchedCityDetail.js"],"sourcesContent":["import { Suspense } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Await, defer, useLoaderData } from \"react-router-dom\";\r\nimport { locationSliceActions } from \"../store/location/location-slice\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport Root from \"../components/Root\";\r\nimport fetchData from \"../utils/fetchData\";\r\n\r\nconst SearchedCityDetailPage = () => {\r\n  const { weather } = useLoaderData();\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Suspense fallback={<Spinner />}>\r\n      <Await resolve={weather}>\r\n        {(weather) => {\r\n          const { daily, daily_units, hourly, current_weather } = weather.data;\r\n          const { city } = weather;\r\n\r\n          const {\r\n            weathercode: hourlyWeatherCodes,\r\n            time: hourlyTimes,\r\n            temperature_2m: hourlyTemperatures,\r\n          } = hourly;\r\n\r\n          const {\r\n            temperature_2m_max: temperature_unit,\r\n            windspeed_10m_max: windspeed_unit,\r\n          } = daily_units;\r\n\r\n          dispatch(locationSliceActions.locate(city));\r\n\r\n          return (\r\n            <Root\r\n              daily={daily}\r\n              units={{ temperature_unit, windspeed_unit }}\r\n              current_weather={current_weather}\r\n              hourly={{\r\n                hourlyWeatherCodes,\r\n                hourlyTimes,\r\n                hourlyTemperatures,\r\n              }}\r\n              searched={true}\r\n            />\r\n          );\r\n        }}\r\n      </Await>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default SearchedCityDetailPage;\r\n\r\n// * React-Router loader function\r\nconst searchedCityLoader = async (params) => {\r\n  const { searchedCityDetail } = params;\r\n\r\n  const [latitude, longitude, city] = [\r\n    Number(searchedCityDetail.split(\"&\").at(2).split(\"=\").at(1)),\r\n    Number(searchedCityDetail.split(\"&\").at(3).split(\"=\").at(1)),\r\n    searchedCityDetail.split(\"&\").at(1).split(\"=\").at(1),\r\n  ];\r\n\r\n  const data = await fetchData(\r\n    `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,apparent_temperature,precipitation,rain,showers,snowfall,snow_depth,weathercode,windspeed_10m&daily=weathercode,temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,rain_sum,showers_sum,snowfall_sum,precipitation_hours,windspeed_10m_max,windspeed_10m_min&current_weather=true&timezone=auto`\r\n  );\r\n\r\n  return { data, city };\r\n};\r\n\r\n// * Deferring the loader function for asynchronous rendering\r\nexport const loader = ({ params }) =>\r\n  defer({ weather: searchedCityLoader(params) });\r\n"],"names":["weather","useLoaderData","dispatch","useDispatch","Suspense","fallback","resolve","data","daily","daily_units","hourly","current_weather","city","hourlyWeatherCodes","weathercode","hourlyTimes","time","hourlyTemperatures","temperature_2m","temperature_unit","temperature_2m_max","windspeed_unit","windspeed_10m_max","locationSliceActions","units","searched","searchedCityLoader","params","searchedCityDetail","Number","split","at","latitude","longitude","fetchData","loader","defer"],"sourceRoot":""}